name: experimento-ci-cd

# Evento que aciona o workflow
on:
  pull_request:
    branches:
      - main

# Definição dos jobs (tarefas) que serão executadas
jobs:

  # Primeiro job: Executar testes unitários
  unit-test:
    runs-on: ubuntu-latest # Define o sistema operacional usado no runner (Ubuntu na versão mais recente)
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4 # Faz o download do repositório no runner

      - name: Instalar dependências do backend
        run: |
          cd backend
          npm install

      - name: Executar testes unitários com Jest
        run: |
          cd backend
          npm test -- --coverage # Executa os testes e gera relatório de cobertura

  # Segundo job: Build (construção) das imagens Docker
  build:
    needs: unit-test # Esse job só será executado após o job 'unit-test' ser concluído com sucesso
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2 # Habilita a ferramenta Buildx do Docker

      - name: Configurar Docker QEMU
        uses: docker/setup-qemu-action@v2 # Permite builds multiplataforma usando emulação (útil em CI)

      - name: Build das imagens Docker
        run: docker compose build # Executa o build das imagens definidas no docker-compose.yml

  # Terceiro job: Subir os containers temporariamente para testes básicos de integração
  up-containers:
    needs: build # Esse job depende do job 'build'
    runs-on: ubuntu-latest

    # Definição de variáveis de ambiente necessárias para o backend e banco
    env:
      POSTGRES_DB: adote_facil
      POSTGRES_HOST: adote-facil-postgres
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_PORT: 5432
      POSTGRES_CONTAINER_PORT: 6500

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Criar arquivo .env
        working-directory: ./backend
        run: |
          echo "POSTGRES_DB=${{ env.POSTGRES_DB }}" > .env
          echo "POSTGRES_HOST=${{ env.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_USER=${{ env.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_PORT=${{ env.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_CONTAINER_PORT=${{ env.POSTGRES_CONTAINER_PORT }}" >> .env

      - name: Subir containers com Docker Compose
        working-directory: ./backend
        run: |
          docker compose up -d
          sleep 10 # Aguarda alguns segundos para garantir que os serviços subam
          docker compose down

  # Quarto job: Criação do release e entrega do artefato do projeto
  delivery:
    needs: build # Esse job depende do job 'build'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Permissão necessária para criar release

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Gerar arquivo ZIP do projeto completo
        run: zip -r adote-facil-projeto.zip . -x '*.git*' '*.github*' 'node_modules/*'
        # Compacta o projeto, ignorando arquivos desnecessários

      - name: Criar release com artefato
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "adote-facil-projeto.zip"
          tag: "v1.0.0"
          name: "Release v1.0.0"
          body: "Release automática do projeto Adote Fácil via GitHub Actions"
